# -*- coding: utf-8 -*-
"""TicTacToe_pari-gupta.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QrTxZhJW0DJiMx6wtjaMycXLJ_9fiwtV

# **TASK-2**
### **TIC-TAC-TOE AI**

âœ… Step-by-Step Plan:

1. Design the game board (3x3 matrix).

2. Take human input.

3. Make AI move using Minimax algorithm.

4. Check for win/draw conditions after each move.

5. Repeat until game ends.

ðŸ§  Minimax Concept (AI Logic):

 Minimax is a recursive algorithm used in decision making and game theory.

*   AI assumes opponent plays optimally and minimizes its own loss.

*   AI = Maximizer, Player = Minimizer

**ðŸŽ® How to Play:**

Board positions:
-----------
 0 | 1 | 2
-----------
 3 | 4 | 5
-----------
 6 | 7 | 8
-----------

*You input numbers 0-8 to place 'X'. AI plays 'O'.*
"""

import math

# Initialize board
board = [' ' for _ in range(9)]

# Function to print the board
def print_board():
    for row in [board[i*3:(i+1)*3] for i in range(3)]:
        print('| ' + ' | '.join(row) + ' |')

# Check for winner
def check_winner(board, player):
    win_cond = [
        [0,1,2], [3,4,5], [6,7,8],   # rows
        [0,3,6], [1,4,7], [2,5,8],   # columns
        [0,4,8], [2,4,6]             # diagonals
    ]
    for cond in win_cond:
        if all(board[i] == player for i in cond):
            return True
    return False

# Check if board is full
def is_full(board):
    return ' ' not in board

# Minimax algorithm
def minimax(board, is_maximizing):
    if check_winner(board, 'O'):
        return 1
    elif check_winner(board, 'X'):
        return -1
    elif is_full(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'O'
                score = minimax(board, False)
                board[i] = ' '
                best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'X'
                score = minimax(board, True)
                board[i] = ' '
                best_score = min(score, best_score)
        return best_score

# AI move
def ai_move():
    best_score = -math.inf
    move = None
    for i in range(9):
        if board[i] == ' ':
            board[i] = 'O'
            score = minimax(board, False)
            board[i] = ' '
            if score > best_score:
                best_score = score
                move = i
    board[move] = 'O'

# Main game loop
def play_game():
    print("Welcome to Tic-Tac-Toe! You are 'X', AI is 'O'")
    print_board()

    while True:
        # Player move
        try:
            move = int(input("Enter your move (0-8): "))
            if board[move] != ' ':
                print("Spot already taken. Try again.")
                continue
            board[move] = 'X'
        except (ValueError, IndexError):
            print("Invalid input. Enter a number between 0 and 8.")
            continue

        print_board()
        if check_winner(board, 'X'):
            print("You win!")
            break
        if is_full(board):
            print("It's a draw!")
            break

        # AI move
        ai_move()
        print("AI move:")
        print_board()
        if check_winner(board, 'O'):
            print("AI wins!")
            break
        if is_full(board):
            print("It's a draw!")
            break

# Run the game
play_game()

